;;; Compiled snippets and support files for `java-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'java-mode
                     '(("O" "Object $0" "O" nil nil nil nil nil nil)
                       ("README" "A set of java-mode snippets for yasnippet. http://code.google.com/p/yasnippet/" "README" nil nil nil nil nil nil)
                       ("bshjdbcconn" "ds = new javax.naming.InitialContext().lookup(\"${2:java:/DefaultDS}\");\nconn = null;\ntry {\n    conn = ds.getConnection();\n    $0\n} finally {\n    if (conn != null) {\n        try {\n            conn.close();\n        } catch (ignore) { }\n    }\n}\n" "bshjdbcconn" nil nil nil nil nil nil)
                       ("bshjdbcselect" "ps = conn.prepareStatement(\"${1:SELECT 1}\");\nrs = ps.executeQuery();\nwhile (rs.next()) {\n    $0\n}\nrs.close();\nps.close();\n" "bshjdbcselect" nil nil nil nil nil nil)
                       ("bshjdbcupdate" "ps = conn.prepareStatement(\"$1\");\nps.executeUpdate();\nps.close();\n$0\n" "bshjdbcupdate" nil nil nil nil nil nil)
                       ("bshlookup" "${1:result} = new javax.naming.InitialContext().lookup(\"${2:jndiName}\");\n$0\n" "bshlookup" nil nil nil nil nil nil)
                       ("bshlookupr" "props = new java.util.Properties();\nprops.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY,\n          \"org.jnp.interfaces.NamingContextFactory\");\nprops.put(javax.naming.Context.URL_PKG_PREFIXES,\n          \"org.jboss.naming:org.jnp.interfaces\");\nprops.put(javax.naming.Context.PROVIDER_URL, \"localhost:1099\");\ncontext = new javax.naming.InitialContext(props);\n${1:result} = context.lookup(\"${2:jndiName}\");\n$0\n" "bshlookupr" nil nil nil nil nil nil)
                       ("bshmbeanattr" "objectName = javax.management.ObjectName.getInstance(\"${1:jboss.system:type=ServerInfo}\");\nattributeName = \"${2:JavaVMVersion}\";\n${3:result} = ${4:server}.getAttribute(objectName, attributeName);\n$0\n" "bshmbeanattr" nil nil nil nil nil nil)
                       ("bshmbeanconn" "${1:mbeanconn} = new javax.naming.InitialContext().lookup(\"jmx/rmi/RMIAdaptor\");\n$0\n" "bshmbeanconn" nil nil nil nil nil nil)
                       ("bshmbeaninvoke" "objectName = javax.management.ObjectName.getInstance(\"${1:jboss.system:type=Server}\");\noperationName = \"${2:runGarbageCollector}\";\nparams = new Object[0];\nsig = new String[0];\n${3:server}.invoke(objectName, operationName, params, sig);\n$0\n" "bshmbeaninvoke" nil nil nil nil nil nil)
                       ("bshmbeanproxy" "${1:proxy} = org.jboss.mx.util.MBeanProxyExt.create(${2:class}, \"${3:objectNameString}\", ${4:server});\n$0\n" "bshmbeanproxy" nil nil nil nil nil nil)
                       ("bshmbeanserver" "${1:server} = org.jboss.mx.util.MBeanServerLocator.locateJBoss();\n$0\n" "bshmbeanserver" nil nil nil nil nil nil)
                       ("bshp" "print($1);$0" "bshp" nil nil nil nil nil nil)
                       ("bshservicethread" "finished = false;\ninterval = 10000;\n\nrun() {\n    while (!finished) {\n        $0\n        Thread.sleep(${1:interval});\n    }\n}\n\nobjectName() {\n   return \"bsh:service=Example\";\n}\n\nstart() {\n    finished = false;\n    new Thread(this).start();\n}\n\nstop() {\n    finished = true;\n}\n" "bshservicethread" nil nil nil nil nil nil)
                       ("class" "public class ${1:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`} {\n    $0\n}\n" "class { ... }" nil nil nil nil nil nil)
                       ("print" "System.out.println(\"$1\");\n" "debug" nil nil nil nil nil nil)
                       ("do" "do {\n    $0\n} while (${1:condition});\n" "do { ... } while (...)" nil nil nil nil nil nil)
                       ("ext" "extends $0\n" "ext" nil nil nil nil nil nil)
                       ("for" "for (int ${1:i} = 0; $1 < $2; $1++) {\n    $0\n}\n" "for (...) { ... }" nil nil nil nil nil nil)
                       ("forit" "for (Iterator ${1:it} = $2.iterator(); $1.hasNext(); ) {\n    ${3:String} ${4:name} = ($3)$1.next();\n    $0\n}\n" "for (Iterator ...) { ... }" nil nil nil nil nil nil)
                       ("gs" "\nprivate void set$1($2 ${1:$(downcase text)}) {\n        this.${1:$(downcase text)} = ${1:$(downcase text)};\n}\n\nprivate $2 get$1() {\n        return this.${1:$(downcase text)};\n}\n" "getAset" nil nil nil nil nil nil)
                       ("h" "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello world!\");\n    }\n}\n" "h" nil nil nil nil nil nil)
                       ("if" "if (${1:condition}) {\n    $0\n}\n" "if (...) { ... }" nil nil nil nil nil nil)
                       ("ife" "if (${1:condition}) {\n    $2\n} else {\n    $3\n}\n" "if, else" nil nil nil nil nil nil)
                       ("ifee" "if (${1:condition}) {\n    $2\n} else if (${3:condition}) {\n    $4\n} else {\n    $5\n}\n" "if, else if, else" nil nil nil nil nil nil)
                       ("im" "import $0;" "import" nil nil nil nil nil nil)
                       ("imp" "implements $0\n" "imp" nil nil nil nil nil nil)
                       ("dbg" "System.out.println(\"\\n\\n ********************************* \\n\\n $1 value is \" + $0 + \"\\n\\n ********************************* \\n\\n\");" "javalog" nil nil nil nil nil nil)
                       ("list" "List<${1:String}> ${2:list} = new ArrayList<$1>();$0" "list" nil nil nil nil nil nil)
                       ("main" "public static void main(String[] args) {\n    $0\n}" "public static void main (String[] args) { ... }" nil nil nil nil nil nil)
                       ("maine" "public static void main(String[] args) throws Exception {\n    $0\n}" "public static void main (String[] args) throws Exception { ... }" nil nil nil nil nil nil)
                       ("map" "Map<${1:String}, ${2:Object}> ${3:map} = new HashMap<$1, $2>();$0\n" "map" nil nil nil nil nil nil)
                       ("new" "${1:Object} ${2:name} = new $1($3);\n$0\n" "new" nil nil nil nil nil nil)
                       ("p" "System.out.println($1);$0" "p" nil nil nil nil nil nil)
                       ("pa" "package $0;" "package" nil nil nil nil nil nil)
                       ("pri" "private $0" "pri" nil nil nil nil nil nil)
                       ("pro" "protected $0" "pro" nil nil nil nil nil nil)
                       ("prop" "private ${1:String} ${2:name};\n\npublic $1 get${2:$(upcase-initials text)}() {\n    return $2;\n}\n\npublic void set${2:$(upcase-initials text)}($1 $2) {\n    this.$2 = $2;\n}\n" "prop" nil nil nil nil nil nil)
                       ("pub" "public $0" "pub" nil nil nil nil nil nil)
                       ("reader" "BufferedReader reader = null;\ntry {\n    reader =\n        new BufferedReader(\n            new InputStreamReader(in, ${1:\"UTF-8\"}));\n    while (true) {\n        String line = reader.readLine();\n        if (line == null) {\n            break;\n        }\n        $2\n    }\n} catch (IOException ex) {\n    $3\n} finally {\n    try {\n        reader.close();\n    } catch (Exception ignore) { }\n}\n" "BufferedReader" nil nil nil nil nil nil)
                       ("s" "static $0" "s" nil nil nil nil nil nil)
                       ("seamaction" "import org.jboss.seam.ScopeType;\nimport org.jboss.seam.annotations.Name;\nimport org.jboss.seam.annotations.Scope;\n\n@Name(\"$1\")\n@Scope(ScopeType.CONVERSATION)\npublic class ${2:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`} implements java.io.Serializable {\n    $0\n}\n" "Seam Action" nil nil nil nil nil nil)
                       ("seamentity" "import javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\npublic class ${1:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`} implements java.io.Serializable {\n    $0\n}\n" "Seam Entity" nil nil nil nil nil nil)
                       ("servlet" "import java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class ${1:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`} extends HttpServlet {\n    public void doGet(HttpServletRequest req, HttpServletResponse res)\n        throws ServletException, IOException {\n        $0\n    }\n    public void doPost(HttpServletRequest req, HttpServletResponse res)\n        throws ServletException, IOException {\n        \n    }\n}\n" "HttpServlet" nil nil nil nil nil nil)
                       ("servletfilter" "import java.io.IOException;\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\npublic class ${1:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`} implements Filter {\n\n    private FilterConfig config;\n\n    public void init(FilterConfig config) throws ServletException {\n        this.config = config;\n    }\n    \n    public void doFilter(ServletRequest request,\n                         ServletResponse response,\n                         FilterChain chain)\n        throws IOException, ServletException {\n        chain.doFilter(request, response);\n    }\n\n    public void destroy() { }\n}\n" "Filter" nil nil nil nil nil nil)
                       ("sleep" "try {\n    Thread.sleep(${1:1000});\n} catch (InterruptedException ignore) { }\n$0\n" "Thread.sleep()" nil nil nil nil nil nil)
                       ("sync" "synchronized (${1:this} {\n    $0\n}\n" "synchronized" nil nil nil nil nil nil)
                       ("thread" "Thread t = new Thread($1) {\n    public void run() {\n        $0\n    }\n}.start();\n" "thread" nil nil nil nil nil nil)
                       ("tryc" "try {\n    $0\n} catch (${1:Exception} ${2:ex}) {\n}\n" "try, catch" nil nil nil nil nil nil)
                       ("trycf" "try {\n    $0\n} catch (${1:Exception} ${2:ex}) {\n} finally {\n}\n" "try, catch" nil nil nil nil nil nil)
                       ("tryf" "try {\n    $0\n} finally {\n}\n" "try, finally" nil nil nil nil nil nil)
                       ("v" "void $0" "v" nil nil nil nil nil nil)
                       ("while" "while (${1:condition}) {\n    $0\n}\n" "while (...) { ... }" nil nil nil nil nil nil)
                       ("writer" "PrintWriter writer = null;\ntry {\n    writer =\n        new PrintWriter(\n            new BufferedWriter(\n                new OutputStreamWriter(out, ${1:\"UTF-8\"})), true);\n    $2\n    writer.flush();\n} catch (IOException ex) {\n    $3\n} finally {\n    try {\n        writer.close();\n    } catch (Exception ignore) { }\n}\n" "PrintWriter" nil nil nil nil nil nil)))


;;; Do not edit! File generated at Mon Jul 28 09:47:58 2014
